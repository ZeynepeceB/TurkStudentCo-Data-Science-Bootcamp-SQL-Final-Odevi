
I. Üyeler (Members):
CREATE TABLE members (
    member_id SERIAL PRIMARY KEY,  -- Birincil Anahtar (otomatik artan)
    username VARCHAR(50) UNIQUE NOT NULL,  -- Kullanıcı adı (tekil ve boş olamaz)
    email VARCHAR(100) UNIQUE NOT NULL,    -- E-posta (tekil ve boş olamaz)
    password VARCHAR(255) NOT NULL,        -- Şifre (güvenlik için uzun tutuldu)
    registration_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Kayıt tarihi (otomatik olarak şimdi)
    first_name VARCHAR(50) NOT NULL,       -- Ad
    last_name VARCHAR(50) NOT NULL         -- Soyad
);
•SERIAL → PostgreSQL'de otomatik artan tamsayı demektir. member_id için ideal.
•UNIQUE → Aynı kullanıcı adı veya e-posta tekrar girilemez.
•VARCHAR(255) → Şifreler için uzun tutulur.
•DEFAULT CURRENT_TIMESTAMP→ Kayıt tarihi otomatik olarak güncel zamanı alır.

II. Eğitimler (Courses):
CREATE TABLE courses (
    course_id SERIAL PRIMARY KEY,               -- Birincil anahtar (otomatik artan)
    course_name VARCHAR(200) NOT NULL,          -- Eğitim adı
    description TEXT,                           -- Eğitim açıklaması
    start_date DATE NOT NULL,                   -- Başlangıç tarihi
    end_date DATE,                              -- Bitiş tarihi 
    instructor_name VARCHAR(100) NOT NULL       -- Eğitmen adı ve soyadı
);
•SERIAL → course_id için otomatik artar.
•TEXT → Eğitim açıklamaları uzun olabileceği için TEXT kullanılır.
•DATE → Tarihler sadece gün/ay/yıl bilgisi taşıyacağı için DATE türünde tutulur.
•instructor_name → Eğer ilerde eğitmenler için kullanılır.

III. Kategoriler (Categories):
CREATE TABLE categories (
    category_id SMALLINT PRIMARY KEY,         -- Birincil anahtar
    category_name VARCHAR(100) NOT NULL       -- Kategori adı 
);
•SMALLINT performans açısından iyidir.

ALTER TABLE courses
ADD COLUMN category_id SMALLINT,
ADD CONSTRAINT fk_category
    FOREIGN KEY (category_id)
    REFERENCES categories(category_id)
    ON DELETE SET NULL;
INSERT INTO categories (category_id, category_name) VALUES
(1, 'Yapay Zeka'),
(2, 'Blokzincir'),
(3, 'Siber Güvenlik');
•courses tablosuna category_id eklenir.
•Bu sütun, categories tablosundaki category_id alanına bağlanır.
•Bir kategori silinirse, o kategoriye bağlı eğitimlerin category_id değeri NULL olur (ilişki kopar ama eğitim kalır).

IV. Katılımlar (Enrollments):
CREATE TABLE enrollments (
    enrollment_id BIGSERIAL PRIMARY KEY,
    member_id BIGINT NOT NULL,                    
    course_id BIGINT NOT NULL,
    enrollment_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,

    CONSTRAINT fk_member
        FOREIGN KEY (member_id)
        REFERENCES members(member_id)             
        ON DELETE CASCADE,

    CONSTRAINT fk_course
        FOREIGN KEY (course_id)
        REFERENCES courses(course_id)
        ON DELETE CASCADE
);
•BIGSERIAL: Otomatik artan ID üretir.
•FOREIGN KEY (member_id) → members tablosuna bağlı.
•FOREIGN KEY (course_id) → courses tablosuna bağlı.
•ON DELETE CASCADE: Kullanıcı veya eğitim silinirse, bu tablo da ona bağlı verileri siler.
•DEFAULT CURRENT_TIMESTAMP: Tarih otomatik atanır.

V. Sertifikalar (Certificates):
CREATE TABLE certificates (
    certificate_id BIGSERIAL PRIMARY KEY,               -- Otomatik artan PRİMARY KEY
    member_id BIGINT NOT NULL,                          -- Sertifikayı alan kişi
    course_id BIGINT NOT NULL,                          -- Tamamlanan kurs
    certificate_code VARCHAR(100) UNIQUE NOT NULL,      -- Benzersiz sertifika kodu
    issue_date DATE DEFAULT CURRENT_DATE,               -- Veriliş tarihi

    CONSTRAINT fk_cert_member
        FOREIGN KEY (member_id)
        REFERENCES members(member_id)
        ON DELETE CASCADE,

    CONSTRAINT fk_cert_course
        FOREIGN KEY (course_id)
        REFERENCES courses(course_id)
        ON DELETE CASCADE
);
•BIGSERIAL: Otomatik artan ID.
•UNIQUE: Sertifika kodları benzersiz olmalı.
•DEFAULT CURRENT_DATE: Sertifika tarihi otomatik olarak o günü alır.
•FOREIGN KEY: members ve courses ile ilişkili hale getirir.


VI. Sertifika Atamaları (CertificateAssignments):
CREATE TABLE certificate_assignments (
    assignment_id BIGSERIAL PRIMARY KEY,       -- Otomatik artan birincil anahtar
    member_id BIGINT NOT NULL,                 -- Üye FOREIGN KEY
    certificate_id BIGINT NOT NULL,            -- Sertifika FOREIGN KEY
    assignment_date DATE DEFAULT CURRENT_DATE, -- Alım tarihi 

    CONSTRAINT fk_ca_member
        FOREIGN KEY (member_id)
        REFERENCES members(member_id)
        ON DELETE CASCADE,

    CONSTRAINT fk_ca_certificate
        FOREIGN KEY (certificate_id)
        REFERENCES certificates(certificate_id)
        ON DELETE CASCADE
);
•BIGSERIAL: Otomatik artan ID.
•FOREIGN KEY:
1.member_id: members tablosuna bağlı.
2.certificate_id: certificates tablosuna bağlı.
•ON DELETE CASCADE: Bağlı kayıt silinirse buradaki kayıt da silinir.
•assignment_date: Sertifikanın verildiği tarih, boş geçilirse otomatik olarak o gün atanır.


VII. Blog Gönderileri (BlogPosts):
CREATE TABLE blog_posts (
    post_id BIGSERIAL PRIMARY KEY,             -- Otomatik artan birincil anahtar
    title VARCHAR(255) NOT NULL,               -- Blog başlığı
    content TEXT NOT NULL,                     -- Blog içeriği
    publish_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP, -- Yayın tarihi
    author_id BIGINT NOT NULL,                 -- Yazarı (members tablosundan)

    CONSTRAINT fk_post_author
        FOREIGN KEY (author_id)
        REFERENCES members(member_id)
        ON DELETE CASCADE
);
•BIGSERIAL: Her blog gönderisine otomatik ID verir.
•author_id: Blog gönderisini yazan kullanıcıyı temsil eder ve members tablosuna bağlıdır.
•DEFAULT CURRENT_TIMESTAMP: Yayın tarihi boş bırakılırsa otomatik şu anki tarih atanır.
•ON DELETE CASCADE: Üye silinirse blog gönderileri de silinir.



















